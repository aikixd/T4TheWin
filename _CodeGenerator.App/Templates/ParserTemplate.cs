// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace _CodeGenerator.App.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using _CodeGenerator.Definitions.Syntax;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class ParserTemplate : ParserTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n// Generated by: ParserTemplate.tt\r\n\r\nusing System.Collections.Generic;\r\n\r\nname" +
                    "space ");
            
            #line 12 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ClassInfo.Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n\tpartial class ");
            
            #line 14 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ClassInfo.Name));
            
            #line default
            #line hidden
            this.Write("\r\n\t{\r\n");
            
            #line 16 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"

	foreach (var syntax in this.SyntaxParts)
    {
        var args = this.GetArguments(syntax);
		var paramStr = this.MakeParameters(args);
		var argsStr = this.MakeArguments(args);
		

            
            #line default
            #line hidden
            this.Write("\r\n\t\tpublic bool CanParse");
            
            #line 25 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(syntax.GetType().Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 25 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(paramStr));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t{\r\n\t\t\treturn this.TryParse");
            
            #line 27 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(syntax.GetType().Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 27 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(argsStr));
            
            #line default
            #line hidden
            this.Write(", out var _);\r\n\t\t}\r\n\t\t\r\n\t\t// ");
            
            #line 30 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(syntax.GetType().BaseType.Name));
            
            #line default
            #line hidden
            this.Write("\r\n\t\tpublic bool TryParse");
            
            #line 31 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(syntax.GetType().Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 31 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(paramStr));
            
            #line default
            #line hidden
            this.Write(", out ");
            
            #line 31 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(syntax.GetType().Name));
            
            #line default
            #line hidden
            this.Write(" result)\r\n\t\t{\r\n\r\n");
            
            #line 34 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"


		switch (syntax)
        { 
			/***** Delimited text syntax *****/
			case DelimitedTextSyntax dts:
				
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\tvar syntaxList = new List<I");
            
            #line 42 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dts.Name));
            
            #line default
            #line hidden
            this.Write("SyntaxContent>(1024);\r\n\r\n\t\t\twhile (\r\n\t\t\t\tlexer.CanRead() \r\n\t\t\t\t&& ");
            
            #line 46 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(
					"				&& ",
					dts.FollowedBy
					.Select(x => $"this.CanParse{x.GetType().Name}(lexer) == false")
				)));
            
            #line default
            #line hidden
            this.Write(")\r\n\r\n\t\t\t{ ");
            
            #line 54 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"

				foreach (var d in dts.Delimitations)
                { 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t{\r\n\t\t\t\t\tif (this.TryParse");
            
            #line 59 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(d.GetType().Name));
            
            #line default
            #line hidden
            this.Write("(lexer, out var r))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsyntaxList.Add(r);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t" +
                    "\t\t\t}\r\n\r\n");
            
            #line 66 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"

				} // foreach d in delimitations
				
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t{\r\n\t\t\t\t\tif (this.TryParse");
            
            #line 71 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dts.Stream.GetType().Name));
            
            #line default
            #line hidden
            this.Write("(\r\n\t\t\t\t\t\tlexer, \r\n\t\t\t\t\t\tout var r))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsyntaxList.Add(r);\r\n\t\t\t\t\t\tcont" +
                    "inue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tresult = new ");
            
            #line 82 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dts.GetType().Name));
            
            #line default
            #line hidden
            this.Write("(syntaxList);\r\n\t\t\treturn true;\r\n\t\t\t\t");
            
            #line 84 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"

			 	break; // case DelimitedTextSyntax dts

			/***** Syntax list *****/
			case SyntaxList sl:
				
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\tvar list = new List<I");
            
            #line 91 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sl.Name));
            
            #line default
            #line hidden
            this.Write("Content>(1024);\r\n\r\n\t\t\twhile (lexer.CanRead())\r\n\t\t\t{\r\n");
            
            #line 95 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"

				foreach (var s in sl.Syntax)
                { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t{\r\n\t\t\t\t\tif (this.TryParse");
            
            #line 99 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(s.GetType().Name));
            
            #line default
            #line hidden
            this.Write("(lexer, out var r))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlist.Add(r);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n" +
                    "\t\t\t\t\r\n");
            
            #line 106 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"

                }
				
            
            #line default
            #line hidden
            this.Write("\t\t\t}\r\n\r\n\t\t\tresult = new ");
            
            #line 111 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sl.GetType().Name));
            
            #line default
            #line hidden
            this.Write("(list);\r\n\t\t\treturn true;\r\n\r\n\t\t\t\t");
            
            #line 114 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"

				break; // Case SyntaxList sl 
				
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 118 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"

			/***** Stream *****/
			case Stream stream:
				
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\tvar list = new List<I");
            
            #line 123 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(stream.GetType().Name));
            
            #line default
            #line hidden
            this.Write("ListContent>();\r\n\t\t\t\t\r\n\t\t\twhile (lexer.CanReadExcept(");
            
            #line 125 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.MakeStringArrayInit(stream.StopTokens.Select(x => x.Text))));
            
            #line default
            #line hidden
            this.Write("))\r\n\t\t\t{\r\n\t\t\t\t\r\n");
            
            #line 128 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"

				foreach (var syntaxPart in stream.ContentList.Syntax)
                { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t{\r\n\t\t\t\t\t//if (this.TryParse");
            
            #line 132 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(syntaxPart.GetType().Name));
            
            #line default
            #line hidden
            this.Write("(lexer, ");
            
            #line 132 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.MakeStringArrayInit(stream.StopTokens.Select(x => x.Text))));
            
            #line default
            #line hidden
            this.Write(", out var r))\r\n\t\t\t\t\tif (");
            
            #line 133 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.MakeTryParseCall(stream, syntaxPart, "r")));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlist.Add(r);\r\n\r\n\t\t\t\t\t\t// Start from begining of the stream prior" +
                    "ity.\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n");
            
            #line 141 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"

                }
				
            
            #line default
            #line hidden
            this.Write("\t\t\t}\r\n\r\n\t\t\tresult = new ");
            
            #line 146 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(stream.GetType().Name));
            
            #line default
            #line hidden
            this.Write("(list);\r\n\r\n\t\t\t// Streams are always parsed with success. \r\n\t\t\treturn true; \r\n\r\n\r\n" +
                    "\t\t\t\t");
            
            #line 152 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"

				break; // Stream stream

			/***** Syntax *****/
			case Syntax s:
				for (int ic = 0; ic < s.Combinations.Length; ic += 1)
                {
					Write("			if (" + Environment.NewLine);

					// When no parts are present in a combination 'if' statement must have a condition
					if (s.Combinations[ic].Parts.Length == 0)
						Write("                true");

					for (int ip = 0; ip < s.Combinations[ic].Parts.Length; ip += 1)
					{
						var part = s.Combinations[ic].Parts[ip];
						var name = part.GetType().Name;
						

            
            #line default
            #line hidden
            this.Write("\t\t\t\t");
            
            #line 171 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.MakeTryParseCall(s, part, $"syntaxPart{ip}")));
            
            #line default
            #line hidden
            
            #line 171 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
 if (ip + 1 != s.Combinations[ic].Parts.Length) { Write(" &&" + Environment.NewLine); } 

                    } // for ip in combination.parts

					Write(")" + Environment.NewLine);
					
            
            #line default
            #line hidden
            this.Write("\t\t\t{\r\n\t\t\t\tresult = new ");
            
            #line 178 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(syntax.GetType().Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 178 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(
						", ",
						s.Combinations[ic].Parts
						.Select((x, i) => $"syntaxPart{i}"))));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n");
            
            #line 186 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"

                } // for ic in s.combinations
				
            
            #line default
            #line hidden
            this.Write("\t\t\tresult = null;\r\n\t\t\treturn false;\r\n\t\t\t\t");
            
            #line 191 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"

				break; // case Syntax s

			case Token token:
				
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\r\n\t\t\t\tvar next = lexer.Next();\r\n\r\n\t\t\t\tif (next.Text == \"");
            
            #line 199 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(token.Text));
            
            #line default
            #line hidden
            this.Write("\")\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = new ");
            
            #line 201 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(token.GetType().Name));
            
            #line default
            #line hidden
            this.Write("(next);\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresult = null;\r\n\t\t\t\treturn false;\r\n\r\n\r\n\r" +
                    "\n\t\t\t\t");
            
            #line 210 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"

				break; // case Token token

			case DynamicToken dToken:
				if ((dToken.Flags & DynamicTokenFlags.CustomParse) == DynamicTokenFlags.CustomParse)
                { 
            
            #line default
            #line hidden
            this.Write("\t\t\treturn this.TryParse");
            
            #line 216 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dToken.GetType().Name));
            
            #line default
            #line hidden
            this.Write("Impl(lexer, stopSignals, out result);\r\n");
            
            #line 217 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"

                }

				else
                {
				
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\tvar next = lexer.Next(stopSignals);\r\n\r\n\t\t\t\tresult = new ");
            
            #line 226 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dToken.GetType().Name));
            
            #line default
            #line hidden
            this.Write("(next);\r\n\r\n\t\t\t\treturn result != null;\r\n\r\n\t\t\t\t");
            
            #line 230 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"

                }
				break; // case DynamicToken dToken


        } // switch syntax

            
            #line default
            #line hidden
            this.Write("\t\t\r\n\t\t} // Parse method end\r\n");
            
            #line 239 "C:\Dev\T4TW\_CodeGenerator.App\Templates\ParserTemplate.tt"

    } // foreach syntax in syntax parts 

            
            #line default
            #line hidden
            this.Write("\t}\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class ParserTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
