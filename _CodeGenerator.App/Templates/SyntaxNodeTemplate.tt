<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="_CodeGenerator.Definitions.Syntax" #>

// Generated by: SyntaxNodeTemplate.tt

using Microsoft.VisualStudio.Text;
using System.Collections.Generic;
using System.Linq;


namespace <#= this.ClassInfo.Namespace #>
{
	// <#= this.SyntaxPart.GetType().BaseType.Name #>
	public partial class <#= this.ClassInfo.Name #> : ISyntaxNode
	{
		public Span Span { get; }
<#
	switch (this.SyntaxPart)
    {
		case SyntaxList sl:
			#>
		/***** SyntaxList *****/

		private I<#= sl.Name #>Content[] content;
		
		public <#= sl.GetType().Name #>(IList<I<#= sl.Name #>Content> content)
		{
			this.content = content.ToArray();
		}

			<#
			break; // case SyntaxList sl

		case DelimitedTextSyntax dts:
			#>
		/***** DelimitedText *****/
		public <#= dts.GetType().Name #>List Contents { get; }

		public <#= dts.GetType().Name #>(IList<I<#= this.ClassInfo.Name #>Content> contents)
		{
			this.Contents = new <#= dts.GetType().Name #>List(contents);
		}

			<#
			break; // case DelimitedTextSyntax dts

		case Stream stream:
			#>
		/***** Stream *****/
		public <#= stream.GetType().Name #>Tokens Tokens { get; }

		public <#= this.ClassInfo.Name #>(IList<I<#= stream.ContentList.GetType().Name #>Content> tokens)
		{
			this.Tokens = new <#= stream.GetType().Name #>Tokens(tokens);
			this.Span = this.Tokens.Span;
		}

			<#
			break; // case Stream stream

		case Syntax syntax:
			#>
		/***** Syntax *****/
			<#

			foreach (var part in syntax.Combinations.SelectMany(x => x.Parts).Distinct(new SyntaxPartComparer()))
            { #>

		public <#= part.GetType().Name #> <#= part.Name #> { get; }

			<#
            }

			foreach (var combination in syntax.Combinations)
            { #>

		public <#= syntax.GetType().Name #>(<#= 
				string.Join(
					", ",
					combination
					.Parts
					.Select(x => x.GetType().Name + " " + x.Name))
		#>)
		{
<#
				foreach (var part in combination.Parts)
                { #>

				this.<#= part.Name #> = <#= part.Name #>;
				<#
                }
				#>
		
		}

			<#
            }
			
			break; // case Syntax s

		case Token token:
			#>

		public string Text { get; }

		public <#= token.GetType().Name #>(RawToken rt)
		{
			this.Span = rt.Span;
			this.Text = rt.Text;
		}

			<#
			break; // case Token token

		case DynamicToken dToken:
			#>

		public string Text { get; }

		public <#= dToken.GetType().Name #>(RawToken rt)
		{
			this.Span = rt.Span;
			this.Text = rt.Text;
		}

			<#
			break; // case DynamicToken dToken

    }
	#>

	}
}