<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="_CodeGenerator.Definitions.Syntax" #>

using Microsoft.VisualStudio.Text;

namespace <#= this.ClassInfo.Namespace #>
{
	public partial class <#= this.ClassInfo.Name #> : ISyntaxNode
	{
		public Span Span { get; }

<#
	switch (this.SyntaxPart)
    {
		case SyntaxList sl:
			#>
			
		public <#= sl.Syntax.GetType().Name #> <#= sl.Syntax.GetType().Name #> { get; }

			<#
			break; // case SyntaxList sl

		case DelimitedTextSyntax dts:
			#>

		public <#= dts.GetType().Name #>Collection <#= dts.GetType().Name #>Collection { get; }
			<#
			break; // case DelimitedTextSyntax dts

		case Syntax s:

			foreach (var part in s.Combinations.SelectMany(x => x.Parts).Distinct(new SyntaxPartComparer()))
            { #>

		public <#= part.GetType().Name #> <#= part.Name #> { get; }

			<#
            }

			foreach (var combination in s.Combinations)
            { #>

		public <#= s.GetType().Name #>(<#= 
				string.Join(
					", ",
					combination
					.Parts
					.Select(x => x.GetType().Name + " " + x.Name))
		#>)
		{
<#
				foreach (var part in combination.Parts)
                { #>

				this.<#= part.Name #> = <#= part.Name #>;
				<#
                }
				#>
		
		}

			<#
            }
			
			break; // case Syntax s

    }
	#>

	}
}