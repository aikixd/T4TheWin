
// Generated by: ParserTemplate.tt

using System.Collections.Generic;

namespace T4TW.Syntax
{
	partial class Parser
	{

		public bool CanParseTemplateSyntax(Lexer lexer)
		{
			return this.TryParseTemplateSyntax(lexer, out var _);
		}
		
		// Syntax
		public bool TryParseTemplateSyntax(Lexer lexer, out TemplateSyntax result)
		{
			if (
				this.TryParseDirectiveSyntaxList(lexer, out var syntaxPart0) &&
				this.TryParseTemplateBodySyntax(lexer, out var syntaxPart1))
			{
				result = new TemplateSyntax(syntaxPart0, syntaxPart1);
				return true;
			}

			if (
                true)
			{
				result = new TemplateSyntax();
				return true;
			}

			result = null;
			return false;
						
		} // Parse method end

		public bool CanParseTemplateBodySyntax(Lexer lexer)
		{
			return this.TryParseTemplateBodySyntax(lexer, out var _);
		}
		
		// DelimitedTextSyntax
		public bool TryParseTemplateBodySyntax(Lexer lexer, out TemplateBodySyntax result)
		{

			var syntaxList = new List<ITemplateBodySyntaxContent>(1024);

			while (
				lexer.CanRead() 
				&& this.CanParseClassFeatureBlock(lexer) == false)

			{ 
				{
					if (this.TryParseControlBlock(lexer, out var r))
					{
						syntaxList.Add(r);
						continue;
					}
				}


				{
					if (this.TryParseStaticTextSyntax(
						lexer, 
						new string[] {"<#"},
						out var r))
					{
						syntaxList.Add(r);
						continue;
					}
				}

			}

			result = new TemplateBodySyntax(syntaxList);
			return true;
						
		} // Parse method end

		public bool CanParseDirectiveSyntaxList(Lexer lexer)
		{
			return this.TryParseDirectiveSyntaxList(lexer, out var _);
		}
		
		// SyntaxList
		public bool TryParseDirectiveSyntaxList(Lexer lexer, out DirectiveSyntaxList result)
		{

			var list = new List<IDirectiveSyntaxListContent>(1024);

			while (lexer.CanRead())
			{
				{
					if (this.TryParseDirectiveSyntax(lexer, out var r))
					{
						list.Add(r);
						continue;
					}
				}
				
			}

			result = new DirectiveSyntaxList(list);
			return true;

						
		} // Parse method end

		public bool CanParseStaticTextSyntax(Lexer lexer, string[] stopSignals)
		{
			return this.TryParseStaticTextSyntax(lexer, stopSignals, out var _);
		}
		
		// Stream
		public bool TryParseStaticTextSyntax(Lexer lexer, string[] stopSignals, out StaticTextSyntax result)
		{

						
		} // Parse method end

		public bool CanParseControlBlock(Lexer lexer)
		{
			return this.TryParseControlBlock(lexer, out var _);
		}
		
		// Syntax
		public bool TryParseControlBlock(Lexer lexer, out ControlBlock result)
		{
			if (
				this.TryParseControlBlockTagOpenToken(lexer, out var syntaxPart0) &&
				this.TryParseControlBlockStream(lexer, out var syntaxPart1) &&
				this.TryParseBlockTagCloseToken(lexer, out var syntaxPart2))
			{
				result = new ControlBlock(syntaxPart0, syntaxPart1, syntaxPart2);
				return true;
			}

			result = null;
			return false;
						
		} // Parse method end

		public bool CanParseClassFeatureBlock(Lexer lexer)
		{
			return this.TryParseClassFeatureBlock(lexer, out var _);
		}
		
		// Syntax
		public bool TryParseClassFeatureBlock(Lexer lexer, out ClassFeatureBlock result)
		{
			if (
				this.TryParseClassFeatureBlockOpenTagToken(lexer, out var syntaxPart0) &&
				this.TryParseControlBlockStream(lexer, out var syntaxPart1) &&
				this.TryParseBlockTagCloseToken(lexer, out var syntaxPart2))
			{
				result = new ClassFeatureBlock(syntaxPart0, syntaxPart1, syntaxPart2);
				return true;
			}

			result = null;
			return false;
						
		} // Parse method end

		public bool CanParseDirectiveSyntax(Lexer lexer)
		{
			return this.TryParseDirectiveSyntax(lexer, out var _);
		}
		
		// Syntax
		public bool TryParseDirectiveSyntax(Lexer lexer, out DirectiveSyntax result)
		{
			if (
				this.TryParseDirectiveBlockTagOpenToken(lexer, out var syntaxPart0) &&
				this.TryParseDirectiveContentsSyntax(lexer, out var syntaxPart1) &&
				this.TryParseBlockTagCloseToken(lexer, out var syntaxPart2))
			{
				result = new DirectiveSyntax(syntaxPart0, syntaxPart1, syntaxPart2);
				return true;
			}

			result = null;
			return false;
						
		} // Parse method end

		public bool CanParseDirectiveContentsSyntax(Lexer lexer)
		{
			return this.TryParseDirectiveContentsSyntax(lexer, out var _);
		}
		
		// Syntax
		public bool TryParseDirectiveContentsSyntax(Lexer lexer, out DirectiveContentsSyntax result)
		{
			if (
				this.TryParseDirectiveNameSyntax(lexer, out var syntaxPart0) &&
				this.TryParseDirectiveParameterSyntaxList(lexer, out var syntaxPart1))
			{
				result = new DirectiveContentsSyntax(syntaxPart0, syntaxPart1);
				return true;
			}

			result = null;
			return false;
						
		} // Parse method end

		public bool CanParseDirectiveParameterSyntaxList(Lexer lexer)
		{
			return this.TryParseDirectiveParameterSyntaxList(lexer, out var _);
		}
		
		// SyntaxList
		public bool TryParseDirectiveParameterSyntaxList(Lexer lexer, out DirectiveParameterSyntaxList result)
		{

			var list = new List<IDirectiveParameterSyntaxListContent>(1024);

			while (lexer.CanRead())
			{
				{
					if (this.TryParseDirectiveParameterSyntax(lexer, out var r))
					{
						list.Add(r);
						continue;
					}
				}
				
			}

			result = new DirectiveParameterSyntaxList(list);
			return true;

						
		} // Parse method end

		public bool CanParseDirectiveParameterSyntax(Lexer lexer)
		{
			return this.TryParseDirectiveParameterSyntax(lexer, out var _);
		}
		
		// Syntax
		public bool TryParseDirectiveParameterSyntax(Lexer lexer, out DirectiveParameterSyntax result)
		{
			if (
				this.TryParseDirectiveParameterIdentifierSyntax(lexer, out var syntaxPart0) &&
				this.TryParseEqualsToken(lexer, out var syntaxPart1) &&
				this.TryParseStringLiteral(lexer, out var syntaxPart2))
			{
				result = new DirectiveParameterSyntax(syntaxPart0, syntaxPart1, syntaxPart2);
				return true;
			}

			result = null;
			return false;
						
		} // Parse method end

		public bool CanParseDirectiveParameterIdentifierSyntax(Lexer lexer)
		{
			return this.TryParseDirectiveParameterIdentifierSyntax(lexer, out var _);
		}
		
		// Syntax
		public bool TryParseDirectiveParameterIdentifierSyntax(Lexer lexer, out DirectiveParameterIdentifierSyntax result)
		{
			if (
				this.TryParseIdentifierToken(lexer, out var syntaxPart0))
			{
				result = new DirectiveParameterIdentifierSyntax(syntaxPart0);
				return true;
			}

			result = null;
			return false;
						
		} // Parse method end

		public bool CanParseDirectiveNameSyntax(Lexer lexer)
		{
			return this.TryParseDirectiveNameSyntax(lexer, out var _);
		}
		
		// Syntax
		public bool TryParseDirectiveNameSyntax(Lexer lexer, out DirectiveNameSyntax result)
		{
			if (
				this.TryParseIdentifierToken(lexer, out var syntaxPart0))
			{
				result = new DirectiveNameSyntax(syntaxPart0);
				return true;
			}

			result = null;
			return false;
						
		} // Parse method end
	}
}